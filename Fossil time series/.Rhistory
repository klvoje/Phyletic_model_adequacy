time<-y$tt
x<-y$mm
v<-y$vv
n<-y$nn
time<-y$tt
lower<-(1-conf)/2
upper<-(1+conf)/2
# Compute the test statistics for the observed time series
obs.auto.corr<-auto.corr(x, model="stasis")
obs.runs.test<-runs.test(x, model="stasis", theta=theta)
obs.runs.test
theta
mu = 2*(sum(x>theta*sum(x<theta)))/length(x) +1;
# with variance
vr = (mu-1)*(mu-2)/(length(x)-1);
z = (sum(diff(sign(x-theta))!=0)+1 - mu)/sqrt(vr)
z
x
theta
x>theta
x<- sim.Stasis(ns=20, omega=0.3, theta=1)
theta
theta=1
obs.runs.test<-runs.test(x, model="stasis", theta=theta)
x<-x$mm
model=="stasis"
model<-"stasis"
if (model=="stasis")
{
mu = 2*(sum(x>theta*sum(x<theta)))/length(x) +1;
# with variance
vr = (mu-1)*(mu-2)/(length(x)-1);
z = (sum(diff(sign(x-theta))!=0)+1 - mu)/sqrt(vr)
}
z
mu
x
theta
sum(x>theta*sum(x<theta))
mu = 2*(sum(x>mean(x))*sum(x<mean(x)))/length(x) +1;
mu
mu = 2*(sum(x>theta*sum(x<theta)/length(x) +1;
# with variance
vr = (mu-1)*(mu-2)/(length(x)-1);
z = (sum(diff(sign(x-theta))!=0)+1 - mu)/sqrt(vr)
}
return(z)
}
mu = 2*(sum(x>theta*sum(x<theta)/length(x) +1;
mu = 2*(sum(x>mean(x))*sum(x<mean(x)))/length(x) +1;
x>theta)
(x>theta)
mu = 2*(sum(x>x_mean*sum(x<x_mean)/length(x) +1;
# with variance
vr = (mu-1)*(mu-2)/(length(x)-1);
z = (sum(diff(sign(x-theta))!=0)+1 - mu)/sqrt(vr)
}
return(z)
}
mu = 2*(sum(x>x_mean*sum(x<x_mean)/length(x) +1;
mu = 2*(sum(x>mean(x))*sum(x<mean(x)))/length(x) +1;
mu = 2*(sum(x>x_mean)*sum(x<x_mean))/length(x) +1;
x_mean<-mean(x)
mu = 2*(sum(x>x_mean)*sum(x<x_mean))/length(x) +1;
mu = 2*(sum(x>theta)*sum(x<theta))/length(x) +1;
mu = 2*(sum(x>theta)*sum(x<theta))/length(x) +1;
# with variance
vr = (mu-1)*(mu-2)/(length(x)-1);
z = (sum(diff(sign(x-theta))!=0)+1 - mu)/sqrt(vr)
z
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.R')
# Compute the test statistics for the observed time series
obs.auto.corr<-auto.corr(x, model="stasis")
obs.runs.test<-runs.test(x, model="stasis", theta=theta)
obs.runs.test
obs.slope.test<-slope.test(x,time, model="stasis")
function (formula, data = NULL, subset = NULL, na.action = na.fail,
drop.unused.levels = FALSE, xlev = NULL, ...)
x<- sim.Stasis(ns=20, omega=0.3, theta=1)
fit4adequasy.stasis(x, omega=0.3, theta=0.9, plot=TRUE, nrep=1000, conf=0.95)
x<- sim.Stasis(ns=20, omega=0.3, theta=1)
auto.corr.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
net.change.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
runs.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
slope.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.stasis_v2.R')
runs.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
x<- sim.Stasis(ns=20, omega=0.3, theta=1)
runs.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
x<.y
x<-y
x<-y$mm
v<-y$vv
n<-y$nn
time<-y$tt
lower<-(1-conf)/2
upper<-(1+conf)/2
obs.runs.test<-runs.test(x, model="stasis", theta)
obs.runs.test
mu = 2*(sum(x>theta)*sum(x<theta))/length(x) +1;
# with variance
vr = (mu-1)*(mu-2)/(length(x)-1);
z = (sum(diff(sign(x-theta))!=0)+1 - mu)/sqrt(vr)
z
mu = 2*(sum(x>theta)*sum(x<theta))/length(x) +1;
mu
theta
x
x<- sim.Stasis(ns=20, omega=0.3, theta=1)
x
y<- sim.Stasis(ns=20, omega=0.3, theta=1)
x<-y$mm
v<-y$vv
n<-y$nn
time<-y$tt
lower<-(1-conf)/2
upper<-(1+conf)/2
obs.runs.test<-runs.test(x, model="stasis", theta)
obs.runs.test
#Matrix that will contain the test statistic for each simluated data set (time series)
bootstrap.matrix<-matrix(data = NA, nrow = nrep, ncol = 1)
# parametric boostrap
for (i in 1:nrep){
x.sim<-sim.Stasis(ns = length(x), theta = theta, omega = omega, vp = v, nn = n, tt = time)
bootstrap.matrix[i,1]<-runs.test(x.sim$mm, model="stasis")
}
omega=0.3
#Matrix that will contain the test statistic for each simluated data set (time series)
bootstrap.matrix<-matrix(data = NA, nrow = nrep, ncol = 1)
# parametric boostrap
for (i in 1:nrep){
x.sim<-sim.Stasis(ns = length(x), theta = theta, omega = omega, vp = v, nn = n, tt = time)
bootstrap.matrix[i,1]<-runs.test(x.sim$mm, model="stasis")
}
# Estimating the ratio of how often the observed runs test is smaller than the runs tests in the simulated data
bootstrap.runs.test<-length(bootstrap.matrix[,1][bootstrap.matrix[,1]>obs.runs.test])/nrep
# Calculating the "p-value" and whether the observed data passed the test statistic
if (bootstrap.runs.test>round(upper,3) | bootstrap.runs.test<round(lower,3)) pass.runs.test<-"FAILED" else pass.runs.test<-"PASSED"
if(bootstrap.runs.test>0.5) bootstrap.runs.test<-1-bootstrap.runs.test
# Plot the test statistics estimated from the simulated data
if (plot==TRUE) {
layout(1:1)
plot.distributions(bootstrap.matrix[,1],obs.runs.test, test="runs.test");
}
layout(1:1)
plot.distributions(bootstrap.matrix[,1],obs.runs.test, test="runs.test");
#Prepearing the outout
output<-as.data.frame(cbind(round(obs.runs.test,5), round(min(bootstrap.matrix),5), round(max(bootstrap.matrix),5), bootstrap.runs.test/0.5, pass.runs.test), nrow=5, byrow=TRUE)
rownames(output)<-"runs.test"
colnames(output)<-c("estimate","min.sim" ,"max.sim","p-value", "Result")
summary.out<-as.data.frame(c(nrep, conf))
rownames(summary.out)<-c("replications", "confidense level")
colnames(summary.out)<-("Value")
if (save.replicates==FALSE)
{
out<- list("info" = summary.out, "summary" = output)
return(out)
}
out<- list("info" = summary.out, "summary" = output)
out
bootstrap.matrix
# parametric boostrap
for (i in 1:nrep){
x.sim<-sim.Stasis(ns = length(x), theta = theta, omega = omega, vp = v, nn = n, tt = time)
bootstrap.matrix[i,1]<-runs.test(x.sim$mm, model="stasis", theta=theta)
}
# Estimating the ratio of how often the observed runs test is smaller than the runs tests in the simulated data
bootstrap.runs.test<-length(bootstrap.matrix[,1][bootstrap.matrix[,1]>obs.runs.test])/nrep
# Calculating the "p-value" and whether the observed data passed the test statistic
if (bootstrap.runs.test>round(upper,3) | bootstrap.runs.test<round(lower,3)) pass.runs.test<-"FAILED" else pass.runs.test<-"PASSED"
if(bootstrap.runs.test>0.5) bootstrap.runs.test<-1-bootstrap.runs.test
#Prepearing the outout
output<-as.data.frame(cbind(round(obs.runs.test,5), round(min(bootstrap.matrix),5), round(max(bootstrap.matrix),5), bootstrap.runs.test/0.5, pass.runs.test), nrow=5, byrow=TRUE)
rownames(output)<-"runs.test"
colnames(output)<-c("estimate","min.sim" ,"max.sim","p-value", "Result")
output
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.stasis_v2.R')
y<- sim.Stasis(ns=20, omega=0.3, theta=1)
runs.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
y<- sim.Stasis(ns=20, omega=0.3, theta=1)
runs.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
auto.corr.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
net.change.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
y<- sim.Stasis(ns=20, omega=0.3, theta=1)
x<- sim.Stasis(ns=20, omega=0.3, theta=1)
x<- sim.Stasis(ns=20, omega=0.3, theta=1)
auto.corr.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
net.change.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
runs.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
slope.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
fit4adequasy.stasis(x, omega=0.3, theta=0.9, plot=TRUE, nrep=1000, conf=0.95)
x<- sim.Stasis(ns=40, omega=0.3, theta=1)
fit4adequasy.stasis(x, omega=0.3, theta=0.9, plot=TRUE, nrep=1000, conf=0.95)
x<- sim.GRW(ns=40,ms=1, vs=0.5)
auto.corr.test.DT(x, vstep=0.3, mstep=1, conf=0.5, plot=FALSE)
net.change.test.DT(x, vstep=0.3, mstep=1, plot=FALSE)
runs.test.DT(x, vstep=0.3, mstep=1, plot=FALSE)
slope.test.DT(x, vstep=0.3, mstep=1, plot=FALSE)
fit4adequasy.trend(x, vstep=0.5, mstep=1, plot=TRUE, conf=0.95)
x<- sim.Stasis(ns=40, omega=0.3, theta=1)
auto.corr.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
net.change.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
runs.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
slope.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
fit4adequasy.stasis(x, omega=0.3, theta=0.9, plot=TRUE, nrep=1000, conf=0.95)
fit4adequasy.BM(x, vstep=0.5, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40, ms=0, vs=0.5)
fit4adequasy.BM(x, vstep=0.5, plot=TRUE, conf=0.95)
fit4adequasy.stasis(x, omega=0.3, theta=0.9, plot=TRUE, nrep=1000, conf=0.95)
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/plot.distributions_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.trend_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.BM_v2.R')
require(pracma)
require(paleoTS)
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/plot.distributions_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.trend_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.BM_v2.R')
x<- sim.GRW(ns=40, ms=0, vs=0.5)
runs.test.BM(x, vstep=0.3, plot=FALSE)
auto.corr.test.BM(x, vstep=0.3, plot=FALSE)
net.change.test.BM(x, vstep=0.3, plot=FALSE)
slope.test.BM(x, vstep=0.3,plot=FALSE)
fit4adequasy.BM(x, vstep=0.5, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40,ms=1, vs=0.5)
auto.corr.test.DT(x, vstep=0.3, mstep=1, conf=0.5, plot=FALSE)
net.change.test.DT(x, vstep=0.3, mstep=1, plot=FALSE)
runs.test.DT(x, vstep=0.3, mstep=1, plot=FALSE)
slope.test.DT(x, vstep=0.3, mstep=1, plot=FALSE)
fit4adequasy.trend(x, vstep=0.5, mstep=1, plot=TRUE, conf=0.95)
x<- sim.Stasis(ns=40, omega=0.3, theta=1)
auto.corr.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
net.change.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
runs.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
slope.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
fit4adequasy.stasis(x, omega=0.3, theta=0.9, plot=TRUE, nrep=1000, conf=0.95)
fit4adequasy.stasis(x, omega=0.3, theta=1, plot=TRUE, nrep=1000, conf=0.95)
x<- sim.Stasis(ns=40, omega=0.3, theta=1)
fit4adequasy.stasis(x, omega=0.3, theta=1, plot=TRUE, nrep=1000, conf=0.95)
fit4adequasy.BM(x, vstep=0.5, plot=TRUE, conf=0.95)
y<-x
x<-y$mm
v<-y$vv
n<-y$nn
time<-y$tt
conf=0.95
lower<-(1-conf)/2
upper<-(1+conf)/2
# Compute the test statistics for the observed time series
obs.auto.corr<-auto.corr(x, model="BM")
obs.runs.test<-runs.test(x, model="BM")
obs.slope.test<-slope.test(x,time, model="BM")
obs.auto.corr
obs.runs.test
obs.slope.test
out.auto
#Run parametric bootstrap
out.auto<-auto.corr.test.BM(y,vstep, nrep, conf, plot=FALSE)
vstep=0.1
nrep=1000
#Run parametric bootstrap
out.auto<-auto.corr.test.BM(y,vstep, nrep, conf, plot=FALSE)
out.runs<-runs.test.BM(y,vstep, nrep, conf, plot=FALSE)
out.slope<-slope.test.BM(y,vstep, nrep, conf, plot=FALSE)
out.auto
out.runs
out.slope
#Prepearing the output
output<-c(as.vector(matrix(unlist(out.auto[[3]]),ncol=5,byrow=FALSE)),
as.vector(matrix(unlist(out.runs[[3]]),ncol=5,byrow=FALSE)),
as.vector(matrix(unlist(out.slope[[3]]),ncol=5,byrow=FALSE)))
output<-as.data.frame(cbind(c(output[c(1,6,11)]), c(output[c(2,7,12)]),
c(output[c(3,8,13)]), c(output[c(4,9,14)]),
c(output[c(5,10,15)])), ncol=5)
output
rownames(output)<-c("auto.corr", "runs.test", "slope.test")
colnames(output)<-c("estimate", "min.sim" ,"max.sim","p-value", "Result")
output
par(mfrow=c(1,3))
model.names<-c("auto.corr", "runs.test", "slope.test")
plot.distributions(out.auto$replicates,obs.auto.corr, model.names[1], xlab="Simulated data", main="Autocorrelation");
plot.distributions(out.runs$replicates,obs.runs.test, model.names[2], xlab="Simulated data", main="Runs");
plot.distributions(out.slope$replicates,obs.slope.test, model.names[3], xlab="Simulated data", main="Fixed variance");
summary.out<-as.data.frame(c(nrep, conf))
rownames(summary.out)<-c("replications", "confidense level")
colnames(summary.out)<-("Value")
out<- list("info" = summary.out, "summary" = output)
out
debugSource('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.BM_v2.R')
fit4adequasy.BM(x, vstep=0.5, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40, ms=0, vs=0.5)
fit4adequasy.BM(x, vstep=0.5, plot=TRUE, conf=0.95)
debugSource('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.BM_v2.R')
fit4adequasy.BM(x, vstep=0.5, plot=TRUE, conf=0.95)
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.BM_v2.R')
fit4adequasy.BM(x, vstep=0.5, plot=TRUE, conf=0.95)
require(pracma)
require(paleoTS)
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.test.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.test.BM_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/runs.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/slope.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/net.change.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/auto.corr.test.DT_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/plot.distributions_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.stasis_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.trend_v2.R')
source('~/Dropbox/Pågående prosjekter/Model adequasy R package/package_v2/fit4adequasy.BM_v2.R')
x<- sim.GRW(ns=40, ms=0, vs=0.5)
runs.test.BM(x, vstep=0.3, plot=FALSE)
auto.corr.test.BM(x, vstep=0.3, plot=FALSE)
net.change.test.BM(x, vstep=0.3, plot=FALSE)
slope.test.BM(x, vstep=0.3,plot=FALSE)
fit4adequasy.BM(x, vstep=0.5, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40,ms=1, vs=0.5)
auto.corr.test.DT(x, vstep=0.3, mstep=1, conf=0.5, plot=FALSE)
net.change.test.DT(x, vstep=0.3, mstep=1, plot=FALSE)
runs.test.DT(x, vstep=0.3, mstep=1, plot=FALSE)
slope.test.DT(x, vstep=0.3, mstep=1, plot=FALSE)
fit4adequasy.trend(x, vstep=0.5, mstep=1, plot=TRUE, conf=0.95)
x<- sim.Stasis(ns=40, omega=0.3, theta=1)
auto.corr.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
net.change.test.stasis(x, omega=0.3, theta=1, plot=FALSE)
x<- sim.GRW(ns=40,ms=1, vs=0.5)
fit4adequasy.trend(x, vstep=0.5, mstep=1, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40,ms=1, vs=0.5)
fit4adequasy.trend(x, vstep=0.5, mstep=1, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40,ms=1, vs=0.5)
fit4adequasy.trend(x, vstep=0.5, mstep=1, plot=TRUE, conf=0.95)
x<- sim.Stasis(ns=40, omega=0.3, theta=1)
fit4adequasy.stasis(x, omega=0.3, theta=1, plot=TRUE, nrep=1000, conf=0.95)
x<-seq(1,10,1)
y<-seq(2,11,1)
y<--y
y
cor(x,y)
x<-seq(-1,-10,1)
x<--x
x
cor(x,y)
x<- sim.GRW(ns=40,ms=1, vs=0)
fit4adequasy.trend(x, vstep=0.5, mstep=1, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40,ms=1, vs=0)
fit4adequasy.trend(x, vstep=0, mstep=1, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40,ms=1, vs=0.01)
fit4adequasy.trend(x, vstep=0, mstep=1, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40,ms=1, vs=0.01)
fit4adequasy.trend(x, vstep=0, mstep=1, plot=TRUE, conf=0.95)
x<- sim.GRW(ns=40,ms=1, vs=0.01)
fit4adequasy.trend(x, vstep=0.01, mstep=1, plot=TRUE, conf=0.95)
129+34+36
129+29+36
library("devtools")
install_github('adePEM','k.l.voje')
install_github('adePEM','k.l.voje/adePEM')
install_github('adePEM')
library(devtools)
install_github(klvoje/adePEM)
install_github("klvoje/adePEM")
install_github("klvoje/adePEM")
library(adePEM)
net.change.test()
net.change.test
fit3adequasy.BM
runs.test.
install_github("klvoje/adePEM")
library(adePEM, lib.loc="/data/Rpackages/")
?fit3adequasy.BM
?fit3adequasy.trend
install_github("klvoje/adePEM")
install_github("klvoje/adePEM", force=TRUE)
library("devtools")
install_github("klvoje/adePEM")
library(adePEM)
net.change.test
?net.change.test
remove.packages()
remove.packages(adePEM)
?remove.packages()
remove.packages("adePEM")
remove.packages("adePEM")
install_github("klvoje/adePEM")
?net.change.test
auto.corr
?auto.corr
?auto.corr
paleoTS
library(adePEM)
library(paleoTS)
setwd("~/Dropbox/Pågående prosjekter/Model adequasy R package/MME/to github/Fossil time series")
temp = list.files(pattern="*.txt")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
nr_datasets<-length(temp)
nr_parameters<-66
replicates<-10
out<-matrix(nrow=nr_datasets, ncol=nr_parameters, data=NA)
colnames(out)<-c("AICc.Directional.change","AICc.Random.walk", "AICc.Stasis",
"Akaike.wt.Directional.change","Akaike.wt.Random.walk","Akaike.wt.Stasis",
"theta","omega",
"auto.corr_stasis_est", "auto.corr_stasis_min","auto.corr_stasis_max","auto.corr_stasis_p", "auto.corr_stasis_result",
"runs.test_stasis_est", "runs.test_stasis_min","runs.test_stasis_max","runs.test_stasis_p", "runs.test_stasis_result",
"slope.test_stasis_est", "slope.test_stasis_min","slope.test_stasis_max","slope.test_stasis_p", "slope.test_stasis_result",
"net.change.test_stasis_est", "net.change.test_stasis_min","net.change.test_stasis_max","net.change.test_stasis_p", "net.change.test_stasis_result",
"vstep_RW",
"auto.corr_RW_est", "auto.corr_RW_min","auto.corr_RW_max","auto.corr_RW_p", "auto.corr_RW_result",
"runs.test_RW_est", "runs.test_RW_min","runs.test_RW_max","runs.test_RW_p", "runs.test_RW_result",
"slope.test_RW_est", "slope.test_RW_min","slope.test_RW_max","slope.test_RW_p", "slope.test_RW_result",
"mstep_trend", "vstep_trend",
"auto.corr_trend_est", "auto.corr_trend_min","auto.corr_trend_max","auto.corr_trend_p", "auto.corr_trend_result",
"runs.test_trend_est", "runs.test_trend_min","runs.test_trend_max","runs.test_trend_p", "runs.test_trend_result",
"slope.test_trend_est", "slope.test_trend_min","slope.test_trend_max","slope.test_trend_p", "slope.test_trend_result",
"interval.length.MY", "generation.time", "taxa", "dimensions", "species")
out<-as.data.frame(out)
for (i in 1:10){
indata<-read.table(temp[i], header=T)
y<-as.paleoTS(indata$mm, indata$vv, indata$N, indata$age.in.MY)
if (indata$log[1] =="no")   y<-ln.paleoTS(y);
if (indata$dimension[1] =="area") y$mm<-y$mm/2; y$vv<-y$vv/4;
out[i,1:3]<-fit3models(y, method = "Joint")[1:3,3]
out[i,4:6]<-fit3models(y, method = "Joint")[1:3,4]
theta<-opt.joint.Stasis(y)$par[1]
omega<-opt.joint.Stasis(y)$par[2]
out[i,7]<-theta
out[i,8]<-omega
# adequacy test of stasis
temp_Stasis<-fit4adequacy.stasis(y, nrep=replicates, plot = FALSE)
out[i,9:13]<-as.matrix(temp_Stasis$summary)[1,1:5]
out[i,14:18]<-as.matrix(temp_Stasis$summary)[2,1:5]
out[i,19:23]<-as.matrix(temp_Stasis$summary)[3,1:5]
out[i,24:28]<-as.matrix(temp_Stasis$summary)[4,1:5]
vstep_RW<-opt.joint.URW(y)$par[2]
out[i,29]<-vstep_RW
# adequacy test of RW
temp_RW<-fit3adequacy.RW(y, nrep=replicates, plot = FALSE)
out[i,30:34]<-as.matrix(temp_RW$summary)[1,1:5]
out[i,35:39]<-as.matrix(temp_RW$summary)[2,1:5]
out[i,40:44]<-as.matrix(temp_RW$summary)[3,1:5]
mstep_trend<-opt.joint.GRW(y)$par[2]
vstep_trend<-opt.joint.GRW(y)$par[3]
out[i,45]<-mstep_trend
out[i,46]<-vstep_trend
# adequacy tests of trend
temp_trend<-fit3adequacy.trend(y,nrep=replicates, plot = FALSE)
out[i,47:51]<-as.matrix(temp_trend$summary)[1,1:5]
out[i,52:56]<-as.matrix(temp_trend$summary)[2,1:5]
out[i,57:61]<-as.matrix(temp_trend$summary)[3,1:5]
out[i,62]<-indata$interval.length.MY[1]
out[i,63]<-indata$generation.time[1]
out[i,64]<-levels(droplevels(indata$taxa[1]))
out[i,65]<-levels(droplevels(indata$dimension[1]))
out[i,66]<-levels(droplevels(indata$species[1]))
print(i)
}
head(out,10)
y<- sim.GRW(ns=40,ms=1, vs=0.1)
auto.corr.test.trend(y, conf=0.95, plot=TRUE)
runs.test.trend(y, plot=TRUE)
slope.test.trend(y, plot=TRUE)
fit3adequacy.trend(y, plot=TRUE, conf=0.95)
x<- sim.Stasis(ns=40, omega=1, theta=1)
auto.corr.test.stasis(x, plot=TRUE)
net.change.test.stasis(x, plot=TRUE)
runs.test.stasis(x, plot=TRUE)
slope.test.stasis(x, plot=TRUE)
runs.test.RW(y, plot=FALSE)
auto.corr.test.RW(y, plot=FALSE)
slope.test.RW(y, plot=FALSE)
fit3adequacy.RW(y, plot=TRUE, conf=0.95)
runs.test.RW(y, plot=TRUE)
